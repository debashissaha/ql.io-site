[
    {
        "title": "List Resources",
        "note" : "This statement lists all tables statically declared.",
        "statement" : "show tables"
    },
    {
        "title" : "Describe a Table",
        "note" : "Describe a table. Comments can use Markdown.",
        "statement" : "describe eBay.ProductReviews"
    },
    {
        "title": "Where Clause",
        "note": "Use where clause to supply inputs to HTTP requests",
        "statement" : "select * from google.geocode where address = &quot;bora bora&quot;"
    },
    {
        "title" :  "Columns Clause",
        "note" : "Select only some fields from response. The response will be an array of of array of fields selected.",
        "statement" : "select ProductID[0].Value, DetailsURL, StockPhotoURL from eBay.FindProducts where QueryKeywords=&quot;mini cooper&quot;"
    },
    {
        "title" :  "Columns Clause with Aliases",
        "note" : "You can change the shape of the row in the response to an object using column aliases.",
        "statement" : "select ProductID[0].Value as id, DetailsURL as details, StockPhotoURL as photo from eBay.FindProducts where QueryKeywords=&quot;mini cooper&quot;"
    },

    {
        "title" : "Pagination",
        "note" : "Paginate the above query",
        "statement" : "select title, itemId, primaryCategory.categoryName, \n     sellingStatus.currentPrice from ebay.finding.items where keywords= 'cooper' and \n     FreeShippingOnly = 'true' and MinPrice = '100' limit 10 offset 20"
    },
    {
        "title" : "Nested Selection",
        "note" : "This query first finds items from findItemsByKeywords service and then gets their details from Shopping API's GetMultipleItems service all in one go. The engine takes care of coordinating concurrent IO to.",
        "statement" : "select e.Title, e.ItemID from ebay.shopping.item as e where itemId in \n     (select itemId from ebay.finding.items where keywords = 'mini')"
    },
    {
        "title" : "Table Aliases",
        "note" : "You can also use aliases for tables.",
        "statement" : "select e.Title, e.ItemID from ebay.shopping.item as e where e.itemId in \n     (select itemId from ebay.finding.items where keywords = 'mini')"
    },
    {
        "title" :  "Column Aliases",
        "note" : "You can shape the response by using column aliases.",
        "statement" : "select title as title, itemId as id, primaryCategory.categoryName as cat, \n     sellingStatus.currentPrice as price from ebay.finding.items where keywords='cooper'"
    },
    {
        "title" : "A More Complex Nested Selection",
        "note" :  "Here is another example that finds IDs and titles of elements given a category ID. In this example, the category ID is found by example - i.e., by selecting the category Id of one item from findItemsByKeywords service given a keyword. It then restricts the location of items by zip code and distance.",
        "statement" :  "select itemId, title from ebay.finding.category where categoryId in \n     (select primaryCategory.categoryId from ebay.finding.items where keywords='ipad' limit 1) \n     and zip = '98074' and distance = '10'"
    },
    {
        "title": " Join",
        "note" :  "Here is a complex join. This join combines data from three different sources forking several HTTP requests and joining on responses when the services respond.",
        "statement" : "select e.Title, e.ItemID, g.geometry.location from ebay.shopping.item as e, google.geocode as g where \n      e.itemId in (select itemId from ebay.finding.items where keywords = 'mini') \n     and g.address = e.Location"
    },
    {
        "title": " Join with column aliases",
        "note" :  "Here is the same join with column aliases.",
        "statement" : "select e.Title as title, e.ItemID as id, g.geometry.location as location from ebay.shopping.item as e, google.geocode as g where \n      e.itemId in (select itemId from ebay.finding.items where keywords = 'mini') \n     and g.address = e.Location"
    },
    {
        "title" : "ql Script",
        "note" : "This example shows how to select data from a JSON object. You cal always mix and match selects from remote resources and JSON objects.",
        "statement" : "foo = {\n  \"fname\" : \"Hello\",\n  \"lname\" : \"World\",\n  \"place\" : \"Sammamish, WA\"};\ndata = select fname, lname, place from foo;\nreturn {\n\"data\" :  \"{data}\"\n};"
    },
    {
        "title": "Scripting as an alternative to join",
        "note": "First search for items and then their details. In stead of using a nested select, this example uses a script.",
        "statement": "minis = select * from ebay.finding.items where keywords = 'mini cooper' limit 10;\ndetails = select PictureURL from ebay.shopping.item where itemId in (select itemId from minis);\nreturn {\n\"mydata\" : \"{details}\"\n};"
    },
    {
        "title": "Async Fork-Join - A Better Alternative to Batching",
        "note": "This example mimics some calls from Android app",
        "statement": "itemId = select itemId from ebay.finding.items where keywords = 'ferrari' limit 1;\nitem = select * from ebay.shopping.singleitem where includeSelector = 'Details,ShippingCosts,ItemSpecifics,Variations,Description'\n and itemId = '{itemId}';\nuser = select * from ebay.shopping.userprofile where includeSelector = 'Details' and userId = 'sallamar';\ntradingItem = select * from ebay.trading.getitem where itemId = '{itemId}';\nbestOffers = select * from ebay.trading.bestoffers where itemId = '{itemId}';\nbidders = select * from ebay.trading.getallbidders where itemId = '{itemId}';\nreturn { \n\"user\" : \"{user}\",\n\"item\" : \"{item}\",\n\"tradingItem\" : \"{tradingItem}\",\n\"bidders\" : \"{bidders}\",\n\"bestOffers\" : \"{bestOffers}\"\n};"
    },
    {
        "title": "A Complex to Show Async Fork-Join",
        "note": "This example mimics some calls from browser toolbar",
        "statement": "itemId = select itemId from ebay.finding.items where keywords = 'ferrari' limit 1;\nitem = select * from ebay.shopping.singleitem where includeSelector = 'Details,ShippingCosts,ItemSpecifics,Variations,Description'\n and itemId = '{itemId}';\nuser = select * from ebay.shopping.userprofile where includeSelector = 'Details' and userId = 'sallamar';\ntradingItem = select * from ebay.trading.getitem where itemId = '{itemId}';\nbestOffers = select * from ebay.trading.bestoffers where itemId = '{itemId}';\nbidders = select * from ebay.trading.getallbidders where itemId = '{itemId}';\nreturn { \n\"user\" : \"{user}\",\n\"item\" : \"{item}\",\n\"tradingItem\" : \"{tradingItem}\",\n\"bidders\" : \"{bidders}\",\n\"bestOffers\" : \"{bestOffers}\"\n};"
    },
    {
        "title" : "Insert",
        "note": "This shows how to insert data into a table - the exact mapping to HTTP methods depends on the resource.",
        "statement": "insert into ebay.internal.shorturi (longUri, duration) \n   values ('http://desc.shop.ebay.in/helloworld', '1')"
    },
    {
        "title" : "Bitly - Generate Shortcut",
        "note" : "This examples uses `insert into` to shorten a URL via bitly APIs.",
        "statement" : "insert into bitly.shorten (longUrl) values ('http://www.subbu.org/archives')"
    },
    {
        "title" : "Bitly - Get Long URL",
        "note" : "This examples uses `select from` to expand a bitly shortcut.",
        "statement" : "select long_url from bitly.shorten where shortUrl = 'http://bit.ly/r3aXdM'"
    },
    {
        "title": "Create Table on the Fly",
        "note" : "You can create tables and run queries on the fly, as long as queries don't need to send request bodies or monkey-patching of requests and responses.",
        "statement": "create table geocoder\non select get from \"http://maps.googleapis.com/maps/api/geocode/json?sensor=true&address={^address}\"\nresultset 'results'\nselect address_components[0].long_name from geocoder where address = 'Sammamish, WA';"
    },
    {
        "title": "Looping via the in clause",
        "note" : "This example shows you how to use multiple IDs from one table and use them in a loop with another table.",
        "statement": "prodid = select ProductID[0].Value from ebay.shopping.products where QueryKeywords = 'iphone' and siteid='0';\nphoto = select * from ebay.shopping.productdetails where ProductID in ('{prodid}') and siteid='0' and ProductType = 'Reference';\nprodstats = select * from ebay.shopping.productstats where productID in ('{prodid}');\nreturn {\n  \"productIDs\" : \"{prodid}\",\n  \"ProdDetail\": \"{photo}\",\n  \"ProdStats\": \"{prodstats}\"\n}"
    }

]