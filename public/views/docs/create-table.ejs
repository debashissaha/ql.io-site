<h1>Creating Tables</h1>
  
<p>A table is a mapping of a HTTP resource. Before you can send a request to an HTTP API, you must
first map that resource to ql.io by using a <code>create table</code> statement. There are two ways
to create tables.</p>
  
<ul>
    <li>Create tables on the fly by including <code>create table</code> statements followed by
    statements that use those tables.</li>

    <li>Statically declare tables by adding them to <code>.ql</code> files in the
    <code>tables</code> sub-directory of your app.</li>
</ul>
  
<p>Tables created on the fly are discarded after the script execution completes. In addition, tables
created on the fly can not be used to make <code>POST</code> or <code>PUT</code> or use monkey
patches to tweak requests and responses.</p>

<p>Here is the full syntax of a <code>create table</code> statement.</p>

<pre class="brush: sql">
create table {table-name} 
  on select|insert|delete|update  get from|post to| put to | delete {uri}
    with aliases {nvp}
    using headers {nvp}
    using defaults {nvp}
    using patch {node-module-name}
    using bodyTemplate {template-file-name} type {media-type}
    auth using {node-module-name}
    resultset {quoted-string}
  on insert ... 
    
</pre>

<p>where {nvp} stands for name-value pairs.</p>
  
<h2>Simple Tables</h2>
  
<p>Here are some examples.</p>
  
<pre class="brush: sql">
create table geocoder
  on select get from "http://maps.googleapis.com/maps/api/geocode/json?address={address}&sensor=true"
</pre>
  
<p>This statement just says that, when a <code>select</code> statement is executed, send a HTTP
<code>GET</code> request to the URI specified after <code>from</code> after transforming the URI
template into a URI.</p>

<p>In this statement "{address}" is a placeholder filled in at runtime. See <a
href="/docs/uri-template">URI Templates</a>.

<p>Try the query below to see how this substitution works.</p>

<span class="try"><a href="/console?s=create%20table%20geocoder%0A%20%20on%20select%20get%20from%20%22http%3A%2F%2Fmaps.googleapis.com%2Fmaps%2Fapi%2Fgeocode%2Fjson%3Faddress%3D%7Baddress%7D%26sensor%3Dtrue%22%3B%0Aselect%20*%20from%20geocoder%20where%20address%20%3D%20'San%20Francisco'%3B">try me</a></span>
<pre class="brush: sql">
create table geocoder
  on select get from "http://maps.googleapis.com/maps/api/geocode/json?address={address}&sensor=true";
select * from geocoder where address = 'San Francisco';
</pre>

<p>See the request/response show in the bottom of the Web Console to see the actual HTTP request
made.</p>

<h2>resultset</h2>
  
<p>A <code>resultset</code> clause in the <code>create table</code> statement lets you narrow down
the response to collection with in the response. One of the collections in the above response is the
<code>address_components</code> array.</p>

<span class="try"><a href="/console?s=create%20table%20geocoder%0A%20%20on%20select%20get%20from%20%22http%3A%2F%2Fmaps.googleapis.com%2Fmaps%2Fapi%2Fgeocode%2Fjson%3Faddress%3D%7Baddress%7D%26sensor%3Dtrue%22%0A%20%20%20%20%20%20%20%20%20%20%20%20resultset%20'results.address_components'%3B%0Aselect%20*%20from%20geocoder%20where%20address%20%3D%20'San%20Francisco'%3B">try me</a></span>
<pre class="brush: sql">
create table geocoder
  on select get from "http://maps.googleapis.com/maps/api/geocode/json?address={address}&sensor=true"
            resultset 'results.address_components';
select * from geocoder where address = 'San Francisco';
</pre>

<h2>Aliases</h2>

<h2>Headers</h2>

<h2>Defaults</h2>

<h2>Monkey Patch</h2>

<h2>Body Template</h2>

<p>Use the <code>using bodyTemplate</code> clause to make HTTP requests that take a body. The body
template is a file referenced from the table. The body template must be in the same directory as the
file containing the <code>create table</code> is. </p>

<p>ql.io currently supports two kinds of templates.</p>
  
<ul>
    <li>URI formatted templates: When the body type is
    <code>application/x-www-form-urlencoded</code>, the template uses the HTML form encoding.</li>
    
    <li>Non-URI formatted templates: These are processed using <a
    href="http://mustache.github.com/">Mustache</a>.</li>    
</ul>

<p>EXAMPLES</p>

  
<h2>Auth</h2>

<h2>Multiple Operations</h2>

<p>If the same table also supports other types of statements such as `delete` and `insert into` you
can also describe them in `create table` statements. Here is an example.</p>

<pre class="brush: sql">
create table bitly.shorten
  on insert get from "http://api.bitly.com/v3/shorten?login={^login}&apiKey={^apikey}&longUrl={^longUrl}&format={format}"
            using defaults apikey = "{config.bitly.apikey}", login = "{config.bitly.login}", format = "json"
            using patch 'shorten.js'
            resultset 'data.url'
  on select get from "http://api.bitly.com/v3/expand?login={^login}&apiKey={^apikey}&shortUrl={^shortUrl}&format={format}"
            using defaults apikey = "{config.bitly.apikey}", login = "{config.bitly.login}", format = "json"
            using patch 'shorten.js'
            resultset 'data.expand'
</pre>





